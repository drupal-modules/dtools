<?php

/**
 * @file
 *   Form settings per user
 *
 * @version
 *   $Id$
 *
 * @developer:
 *    Rafal Wieczorek <kenorb@gmail.com>
 */

/**
 * Implementation of hook_boot(). Runs even for cached pages.
 */
function wsod_boot() {
  global $drupal_path, $wsod_exit;
  $drupal_path = getcwd();
  register_shutdown_function('wsod_check_wsod');
  $wsod_exit = FALSE; // init global variable
} 

/**
 * Implementation of hook_menu().
 */
function wsod_menu() {
  $items['admin/build/dtools'] = array(
    'title' => 'Diagnostics Tools',
    'description' => t('Diagnostics tools only for advanced users.'),
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('wsod_admin_form'),
    'access arguments' => array('administer dtools'),
    'file' => 'wsod.admin.inc', 
  );
  $items['admin/build/dtools/wsod'] = array(
    'title' => t('Diagnostics Tools'),
    'type' => MENU_NORMAL_ITEM | MENU_DEFAULT_LOCAL_TASK,
    'weight' => -9,
  ); 
  $items['admin/build/dtools/rebuild'] = array(
    'title' => 'Rebuild menu',
    'page arguments' => array('wsod_menu_rebuild_confirm'),
    'file' => 'wsod.admin.inc',
    'access arguments' => array('administer dtools'),
    'type' => MENU_CALLBACK,
  ); 
  /*
  $items['wsod'] = array( // TODO: not tested yet
    'title' => 'WSOD',
    'page callback' => 'wsod_check_wsod',
    'page arguments' => array(TRUE),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
   */
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function wsod_perm() {
   return array('administer dtools');
}

/**
 * Implementation of hook_form_alter().
 */
function wsod_form_alter($form, $form_state, $form_id) {
    global $active_forms;
    $active_forms[] = $form_id;
}

/**
 * Implementation of hook_exit().
 */
function wsod_exit($destination = TRUE) {
  global $wsod_exit;
  $wsod_exit = $destination; // set each time TRUE or destination url if hook_exit was executed
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function wsod_theme_registry_alter(&$items) {
  /* TODO: check for backtrace if some module mess up with theme registry */
}

/**
 * Detect WSOD and fix it
 * 
 * @param bool $verbose
 *   if TRUE, print debug output to the screen
 * @param bool $fix_on_fly
 *   if TRUE, wsod will try to fix the problem on the fly
 * @param bool $emergency
 *   if TRUE, make additional checking for WSODs (could spent even 3x time)
 * @return string
 *   returns diagnostics messages
 * 
 */
function wsod_check_wsod($verbose = FALSE, $fix_on_fly = TRUE, $emergency = FALSE) {
    global $drupal_path, $wsod_rendered;

    if ($wsod_rendered) {
      return;
    } else {
      $wsod_rendered = TRUE;
    }
    
    // init variables
    if (!function_exists('t')) {
      function t($msg, $args = NULL) { return $msg; }
    }
    $nl = t('<br>');

    // CHECK FOR FATAL ERRORS  (which Drupal can't handle)
    if (wsod_fatal_error_checker($output, $fix_on_fly)) {
        $output .= t('Backtrace: ') . wsod_get_backtrace().$nl.$nl;
        $verbose ? print $output : print 'n/a' ;
        return; // can't continue, if there are some fatal errors
    }

    /* set base Drupal path as current especially during shutdown */
    $curr_path = getcwd();
    if ($curr_path <> $drupal_path) { // Note: Working directory of the script can change inside the shutdown function under some web servers, e.g. Apache.
        chdir($drupal_path);
    }

    // ignore wsod checking on batch processing and maintenance work or it's disabled
    if (defined('MAINTENANCE_MODE') || isset($_SESSION['batch_form_state'])) {
        return;
    }

    if (!$emergency && variable_get('wsod_live_checking', FALSE) == FALSE) {
      return;
    }
   
    // ignore wsod checking on POST forms, it breaking the forms (#416616) (TODO: later it could be supported - )
    if (!empty($_POST['form_build_id'])) {
        return;
    }

    $output = ''; // init output

    // ignore if we are on non-html page
    $headers = drupal_get_headers(); // FIXME: any other way to get headers?
    $ignore_formats = array('xml', 'javascript', 'json', 'plain', 'image', 'application', 'csv', 'x-comma-separated-values');
        foreach ($ignore_formats as $format) {
        if (strstr($headers, $format)) {
            return;
        }
    }

    /* check core modules */
    if ($disabled_module = wsod_check_core_modules(array('node', 'system'))) {
        $output .= t("Following core module is disabled: $disabled_module!").$nl;
        if ($fix_on_fly) {
          module_enable(array($disabled_module));
          wsod_clear_caches(); // clear all caches
          module_rebuild_cache(); // rebuild paths in system table
          $output .= t("Fixing by enabling $disabled_module core module!").$nl;
        }
        $verbose ? print $output : print 'n/a' ;
        return;
    }

    /* check if hook_exit has been executed properly */
    global $wsod_exit;
    if (!$wsod_exit && module_exists('wsod')) {
        $output .= t("hook_exit wasn't executed properly at %path, possible unexpected exit()/die()", array('%path' => $_GET['q'])).$nl;
        $output .= t('Backtrace: ') . wsod_get_backtrace().$nl.$nl;
        $verbose ? print $output : print 'n/a' ;
        return;
    } else if (is_string($wsod_exit)) { // check if $wsod_exit contain new destination url
      $output .= t("WSOD: Redirection to: ".drupal_get_destination()).$nl;
      print $output;
      return; // ignore any action if redirection via drupal_goto() is made
    }

    if (!function_exists('menu_get_item')) {
         /*
             FIXME:
             In some version of PHP4 with specified HTTP Requests Drupal includes could be not loaded in this stage
             causing several errors with 'Call to undefined function'.
             There are too many dependencies, so if this will happen, it's better to stop at this stage
          */
        $output = ltrim($output);
        if (!empty($output)) {
            watchdog('wsod', $output); // log the error
        }
        return;
    }

    // ignore some specified callbacks (like Rebuilding permissions)
    $router_item = menu_get_item();
    if ($router_item['page_callback'] == 'system_batch_page') {
        return;
    }

    module_load_include('inc', 'wsod', 'wsod'); // include functions

    // check input variables
    $path = $_GET['q'];
    isset($_GET['fix']) ? $fix_on_fly = TRUE : NULL; // if fix is defined, then switch to fixing mode

    /* check menu handler */
    ob_start();
    $return = menu_execute_active_handler(); // use q argument to change default path
    $content_output = ob_get_clean(); // TODO: what if there is some content?
    // CHECK FOR FATAL ERRORS again
    if (wsod_fatal_error_checker($output, $fix_on_fly)) {
        $verbose ? print $output : print 'n/a' ;
        $output = ltrim($output);
        if (!empty($output)) {
          watchdog('wsod', $output); // log the error
        }
        return; // can't continue, if there is some fatal error
    }

    if (is_null($return)) { /* check menu handler */
        $output .= sprintf("%s: returned %s - it's very bad!", 'menu_execute_active_handler()', 'NULL').$nl;
        $output .= t("WSOD detected!").t('&nbsp;').t("Checking for problems...").$nl;
        $output .= sprintf(t("ERROR: %s returned empty value!"), 'menu_execute_active_handler()').$nl;
        /* check theme hooks */
        $res = wsod_validate_theme_hooks($verbose, $output);
        if (!$res) {
            if ($fix_on_fly) {
                wsod_clear_caches(); // clear all caches
                module_rebuild_cache(); // rebuild paths in system table
                $output .= t("Re-testing...").$nl;
                $res = wsod_validate_theme_hooks($verbose, $output);
                if (!$res) {
                    $output .= t("There is still problem related to theme hooks").$nl; // FIXME
                } else {
                    $output .= t("Fixed?!").$nl;
                }
            } else {
                $output .= t("fix_on_fly is no enabled, please enable it to fix the problem").$nl;
            }
        } else {
            $output .= t("Validation theme hooks completed.").$nl;
        }

        /* check forms */
        /* TODO
        $invalid_forms = wsod_check_forms();
        if (!empty($invalid_forms)) {
          $output .= "empty forms = ".print_r($invalid_forms,true)."<br>";
        }
        */

        // PRINT ALL ERRORS FROM SESSION WHICH WILL HELP TO IDENTIFY THE PROBLEM
        if ($_SESSION['messages']['error']) {
            $error_messages = $_SESSION['messages']['error'];
            foreach ($error_messages as $error) {
                $error = str_replace(dirname($drupal_path),'',$error); // delete Drupal full path for security reason
                $output .= print_r($error,true); // show session errors
            }
        }
        $output .= t("Done.").$nl;
    } else {
      /* Standard Drupal behavior section. */
      $title = drupal_set_title();
      if ($emergency) {
        wsod_validate_menu_router();
        $output .= t('Menu router table rebuild!') . $nl;
      }
      switch ($return) {
        case MENU_NOT_FOUND:
            ob_start(); // start buffering
            drupal_not_found(); // return page not found, there can be some status error messages
            $page_output = ob_get_clean(); // get page output
            if (empty($page_output)) {
                $output .= t('MENU_NOT_FOUND: Rendered page is empty!').$nl;
                if ($fix_on_fly) {
                  module_list(TRUE, FALSE); // Refresh the module list to include the new enabled module. [#496198]
                  $output .= t('Module list refreshed!').$nl;
                  drupal_rebuild_theme_registry(); // probably cached theme_registry is broken, rebuild it
                  $output .= t('Theme registry has been cleared from cache!').$nl;
                }
            } else if (empty($title)) { // 
                $output .= $page_output; // if nothing to show, output standard page not found
            }
        break;
        case MENU_ACCESS_DENIED:
            ob_start(); // start buffering
            drupal_access_denied(); // return permission denied page , there can be some status error messages
            $page_output = ob_get_clean(); // get page output
            if (empty($page_output)) {
                $output .= t('MENU_ACCESS_DENIED: Rendered page is empty!').$nl;
                if ($fix_on_fly) {
                  module_list(TRUE, FALSE); // Refresh the module list to include the new enabled module. [#496198]
                  $output .= t('Module list refreshed!').$nl;
                  drupal_rebuild_theme_registry(); // probably cached theme_registry is broken, rebuild it
                  $output .= t('Theme registry has been cleared from cache!').$nl;
                }
            } else {
                $output .= $page_output; // if nothing to show, output standard page not found
                if ($emergency) {
                    /* TODO: don't print it twice */
                    //drupal_set_message(t('%function: %handler - seems ok!', array('%function' => 'menu_execute_active_handler()', '%handler' => 'MENU_ACCESS_DENIED')).$nl);
                }
            }
        break;
        case MENU_SITE_OFFLINE:
            ob_start(); // start buffering
            drupal_site_offline(); // return site offline page, there can be some status error messages
            $page_output = ob_get_clean(); // get page output
            if (empty($page_output)) {
                $output .= t('MENU_SITE_OFFLINE: Rendered page is empty!').$nl;
                if ($fix_on_fly) {
                  module_list(TRUE, FALSE); // Refresh the module list to include the new enabled module. [#496198]
                  $output .= t('Module list refreshed!').$nl;
                  drupal_rebuild_theme_registry(); // probably cached theme_registry is broken, rebuild it
                  $output .= t('Theme registry has been cleared from cache!').$nl;
                }
            } else {
                $output .= $page_output; // if nothing to show, output standard page not found
                if ($emergency) {
                    /* TODO: don't print it twice */
                    //drupal_set_message(t('%function: %handler - seems ok!', array('%function' => 'menu_execute_active_handler()', '%handler' => 'MENU_SITE_OFFLINE')).$nl);
                }
            }
        break;
        default: // other cases
            if (module_exists('content_profile')) {
                /* TODO: Sometimes can't render page on shutdown, because of some errors recently
                    Like: Fatal error: Class 'content_profile_theme_variables' not found in content_profile\content_profile.module on line 585
                 */
                $output .= t('Ignoring page rendering checking, because of incompability with content_profile module.').$nl;
                //break;
            }
            $page_output = theme('page', $return); // return page not found, there can be some status error messages
            if (empty($page_output)) {
                $output .= t('DEFAULT: Rendered page is empty!').$nl;
                if ($fix_on_fly) {
                  module_list(TRUE, FALSE); // Refresh the module list to include the new enabled module. [#496198]
                  $output .= t('Module list refreshed!').$nl;
                  drupal_rebuild_theme_registry(); // probably cached theme_registry is broken, rebuild it
                  $output .= t('Theme registry has been cleared from cache!').$nl;
                }
                if ($emergency) {
                    /* TODO: don't print it twice */
                    //drupal_set_message(t('%function: %handler - seems ok!', array('%function' => 'menu_execute_active_handler()', '%handler' => "$return")).$nl);
                }
            } else {
                $output .= $page_output; // if nothing to show, output standard page not found
            }
      }
    }
    
    if (is_null($return) || $emergency) {
      /* check menu router hooks */
      /* Note:
           Following block code could slow down your website even 3x, 
           so it should be executed only when menu handler returns NULL or wsod checking it in emergency mode.
       */
      $router_item = menu_get_item($path); // get router item
      $router_callback = $router_item['page_callback'];
      if (!empty($router_callback) && !function_exists($router_callback)) { // check if page callback exist
          $output .= sprintf("ERROR: Callback: %s() doesn't exist!<br>", $router_item['page_callback']).$nl;
          drupal_rebuild_theme_registry(); // probably cached theme_registry is broken, rebuild it
          $output .= t('Theme registry has been cleared from cache!').$nl;
          wsod_rebuild_menu_router_table();
          $output .= t('menu_router table rebuild!').$nl;
      } else if (!empty($router_callback)) {
          $res = wsod_check_page_callback($router_item, $verbose, $output, $content); // get content of page callback
          if (empty($res)) { // check if page callback returned some content
              $output .= sprintf("ERROR: Callback: %s() returned empty content!", $router_callback).$nl;
              $output .= sprintf("NOTICE: router_item = %s!", print_r($router_item, TRUE)) . $nl;
              if ($fix_on_fly) { // if fix mode, then fix the errors
                  module_load_include('inc', 'system', 'system.admin'); // include functions
                  $output .= wsod_clear_caches(); // clear all caches
                  module_rebuild_cache();
                  $output .= t('Rebuilded module cache.').$nl; // module rebuild cache
                  wsod_check_theme_registry($output); // check if theme registry is broken, then rebuild it
              } else {
                  $output .= t("fix_on_fly is no enabled, please enable it to fix the problem").$nl;
              }
          } else {
            $output .= $res; // output rendered result
          }
      }
    }

    $verbose ? print (!empty($output) ? $output : '.') : NULL ; // if you see dots, that mean nothing to show (no WSOD on front page, see README.txt)
    $output = ltrim($output); // remove spaces from output
    if (!empty($output)) {
        $output = ltrim($output);
        watchdog('wsod', $output); // log the error
    }
    return $output;
}

/**
 * Check menu_router table, if it's truncated
 * 
 * Read more:
 *  http://drupal.org/node/238760 (menu_router table truncated and site goes down)
 *  http://drupal.org/node/496198 (module_list() is broken in 6.x)
 *  http://drupal.org/node/514898 (ERROR: Callback: system_main_admin_page() doesn't exist!)
 * 
 */
function wsod_validate_menu_router() {
  if (db_result(db_query("SELECT COUNT(*) FROM {menu_router} WHERE path = '%s' OR path LIKE '%s'", 'node', 'admin/build/dtools')) <> 2) {
    wsod_rebuild_menu_router_table(); // Rebuild menu_router, menu_links tables
  }
  /* Validate admin tree - http://drupal.org/node/514898 */
  if (db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s' AND module = '%s'", 'admin', 'system')) > 2) { 
    wsod_rebuild_menu_router_table(); // Rebuild menu_router, menu_links tables
    // FIXME: menu_router rebuilding could not solve the problem, try disable modules which hook_menu_alter implementation like admin_menu
  }
}

/**
 * Check if required core modules are enabled
 * 
 * @param array $modules_name
 *   list of modules to check
 * @return string
 *   returns return name of disabled modules, otherwise return NULL
 */
function wsod_check_core_modules($modules_name) {
  foreach ($modules_name as $key => $module_name) {
    if (!$status = db_result(db_query("SELECT status FROM {system} WHERE name = '%s'", $module_name))) {
      return $module_name;
    }
  }
  return NULL;
}

/**
 * Rebuild system table
 *
 */
function wsod_rebuild_system_table() {
  require_once './includes/file.inc'; // needed for file_scan_directory()
  require_once './modules/system/system.module'; // needed for system_get_files_database()
  module_rebuild_cache(); // rebuild paths in system table
}

/**
 * Rebuild menu_router table
 *
 */
function wsod_rebuild_menu_router_table() {
  module_list(TRUE, FALSE); // Refresh the module list to include the new enabled module. [#496198]
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL); // we need enter into FULL bootstrap mode to fully rebuild menu_router table
  menu_rebuild(); // Rebuild menu_router, menu_links tables
}

/**
 * Rebuild theme registry
 *
 * Note: The reason of broken theme registry could be in example t() call from early stage of Drupal bootstrap (hook_boot)
 *       So if you have broken contributed module, this function fix the problem only temporary.
 * TODO: Find the module which messing up with theme registry through backtrace
 *
 */
function wsod_rebuild_theme_registry(&$output = NULL, $nl = "<br>\n") {
  drupal_rebuild_theme_registry();
  //module_list(TRUE, FALSE); // Refresh the module list to include the new enabled module. [#496198]
  global $theme;
  unset($theme); // unset theme global variable to rebuild it
  unset($GLOBALS['theme']);
  module_implements('theme', FALSE, TRUE);
  init_theme(); // Initialize the theme system by loading the theme.
  $output ? $output .= t('Theme registry has been rebuilt!') . $nl : NULL;
}

/**
 * Check issues in theme registry
 *
 */
function wsod_check_theme_registry(&$output = NULL, $nl = "<br>\n") {
  $output ? $output .= t('Checking theme registry...') . $nl: NULL;
  $hooks = theme_get_registry();
  $hook = 'placeholder'; // basic theme hook name, which should exists always in Drupal 6.x
  if (!isset($hooks[$hook])) {
    $output ? $output .= t('Missing placeholder in theme registry!') . $nl: NULL;
    $output ? $output .= sprintf('If problem appears again, please disable or look for invalid hook_boot code in following modules: %s', implode(', ', module_implements('boot'))) . $nl: NULL;
    wsod_rebuild_theme_registry($output);
  }
}

/**
 * Return backtrace
 */
function wsod_get_backtrace($no_del = 1) {
  $backtrace = debug_backtrace(TRUE);
  if (is_array($backtrace)) {
    array_shift($backtrace); // remove this function from array
    for ($i = 0; $i < $no_del; $i++) { array_shift($backtrace); }
    foreach ($backtrace as $index => $function) {
        $function = $function['function'];
        $line = $backtrace[$index]['line'];
        $filename = basename($backtrace[$index]['file']);
        $buffer .= "$function($filename:$line);";
    } 
  }
  if (empty($buffer)) {
    $buffer = 'n/a';
  }
  return $buffer;
}

/**
 * Clear all caches
 */
function wsod_clear_caches() {
    $output = '';
    $nl = t('<br>');
    cache_clear_all(NULL, 'cache');
    $output .= sprintf(t("Cleared cache using %s"), 'cache_clear_all()').$nl;
    drupal_flush_all_caches();
    $output .= sprintf(t("Cleared cache using %s"), 'drupal_flush_all_caches()').$nl;
    return $output;
}

/**
 * Check for fatal errors
 */
function wsod_fatal_error_checker(&$output, $fix_on_fly = TRUE) {
    // CHECK FOR FATAL ERRORS (which Drupal can't handle)
    $isError = FALSE;
    if ((version_compare(PHP_VERSION, '5.2.0') === 1) && $error = error_get_last()) {
        switch($error['type']){
            case E_ERROR:
            case E_CORE_ERROR:
            case E_COMPILE_ERROR:
            case E_USER_ERROR:
                $isError = TRUE;
                break;
        }
        /* Show fatal error on the page.
           Most people don't use this module, if they don't have any problem,
           so our priority is to show what's wrong with the website
         */
        if ($isError){
            var_dump($error);
            wsod_fatal_error_fix($error['message'], $output, $fix_on_fly); // check if we can fix handled error
            $output .= "ERROR: Script execution halted with error: {$error['message']}<br>";
        } else {
            $output .= "NOTICE: Script execution completed with error: {$error['message']}<br>";
        }
    }
    return $isError;
}

/**
 * Try to fix fatal error
 */
function wsod_fatal_error_fix($error, &$output, $fix_on_fly = TRUE) {
    if (strpos($error, "Cannot redeclare cache") !== FALSE) {
        if ($fix_on_fly) { // if fix mode, then fix the errors
            /* TODO: We can't use Drupal functions in case of fatal error
            module_load_include('inc', 'system', 'system.admin'); // include functions
            $output .= t('Trying to rebuild module cache.'); // module rebuild cache
            module_rebuild_cache();
             */
        }
        $output .= 'Tip: Try to disable additional cache module from your settings.php.<br>\n';
    } else if (strpos($error, "Cannot redeclare") !== FALSE) {
        if ($fix_on_fly) { // if fix mode, then fix the errors
            /* TODO: We can't use Drupal functions in case of fatal error
            module_load_include('inc', 'system', 'system.admin'); // include functions
            $output .= t('Trying to rebuild module cache.'); // module rebuild cache
            module_rebuild_cache();
             */
        }
    } else if (strpos($error, "Call to undefined function") !== FALSE) {
        if ($fix_on_fly) { // if fix mode, then fix the errors
          wsod_rebuild_system_table(); // rebuild system table
          $output .= 'Rebuild system table.<br>\n';
          wsod_force_module_load_all(); // force module load
          $output .= 'Force to load all enabled module files.<br>\n';
          preg_match('/(?P<func_prefix>[a-z0-9]+)_/', $error, $matches);
          $module_prefix = $matches['func_prefix'];
          //$func_name = $matches['func_name']; // TODO
          $module_name = db_result(db_query("SELECT name FROM {system} WHERE name LIKE '$module_name%%' AND status = 0 LIMIT 1"));
          if ($module_name && db_query("UPDATE {system} SET status = 1 WHERE name LIKE '$module_name%%' AND status = 0 LIMIT 1")) {
            $output .= 'Enabled potential dependency module: $module_name.<br>\n';
          }
          $output .= 'Please refresh the page if problem has been fixed.<br>\n';
            /* TODO:
                Another Solution:
                    Eventually we can load all module files and check where it's defined.
                    After that we can compare and check if the module weight is correct.
                    Needed module can be detected from $error via function name.
                    Dependend module can be detected via filename $error['file']
                    Fix: we can increase weight of the module depends of the other module.
                    Example code:
                        $weight = (int) db_result(db_query("SELECT weight FROM {system} WHERE name = 'module1'"));
                        db_query("UPDATE {system} SET weight = %d WHERE name = 'module2'", $weight + 1);
             */
        }
    } else if (strpos($error, "Maximum execution time") !== FALSE) {
      $output .= 'You need to increase max_execution_time in your php.ini and please install drupal_tweaks module.<br>\n';
    }
    if (!$fix_on_fly) {
        $output .= t("fix_on_fly is no enabled, please enable it to fix the problem").$nl;
    }
}

/**
 * Force load all enabled modules
 *
 */
function wsod_force_module_load_all() {
    foreach (module_list(TRUE, FALSE) as $name) {
      include_once drupal_get_filename('module', $name);
    }
}

/**
 * Check forms
 */
function wsod_check_forms() {
  // TODO
  global $active_forms;
  $active_forms=array_unique($active_forms); // remove duplicates
  $empty_forms = array();
  $form_state = array ('storage' => NULL, 'submitted' => FALSE, 'post' => array ());
  $node = array ('storage' => NULL, 'submitted' => FALSE, 'post' => array ());
  $max_count = count($active_forms); // get count of array
  foreach ($active_forms as $key => $form_id) {
    $id = $form_id;
    //$form = drupal_get_form($id); //$form = drupal_retrieve_form($form_id, $form_state);

    $form = drupal_retrieve_form($form_id, $form_state);
    module_invoke_all('form_alter', $form);
    if (empty($form)) {
        $empty_forms[] = $form_id;
    }

    //$form_content = drupal_render_form($form_id, $form);
    $form_content = drupal_get_form($form_id);
    if (empty($form_content)) {
      $empty_forms[] = $form_content;
    }

    if ($key > $max_count+1) {
      print "Recurrency detected in form_alter hook!<br>";
      break;
    }
  }
  return array_unique($empty_forms);
}
